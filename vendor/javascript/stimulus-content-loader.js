import{Controller as e}from"@hotwired/stimulus";class o extends e{connect(){this.hasUrlValue?this.hasLazyLoadingValue?this.lazyLoad():this.load():console.error("[stimulus-content-loader] You need to pass an url to fetch the remote content.")}disconnect(){this.stopRefreshing()}load(){this.fetch(),this.hasRefreshIntervalValue&&this.startRefreshing()}lazyLoad(){const e={threshold:this.lazyLoadingThresholdValue,rootMargin:this.lazyLoadingRootMarginValue};new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&(this.load(),t.unobserve(e.target))}))}),e).observe(this.element)}fetch(){fetch(this.urlValue).then((e=>{if(!e.ok)throw new Error(e.statusText);return e.text()})).then((e=>{this.element.innerHTML=e,this.loadScriptsValue&&this.loadScripts(),this.dispatch("success")})).catch((e=>{this.dispatch("error",{detail:{error:e}})}))}startRefreshing(){this.refreshTimer=setInterval((()=>{this.fetch()}),this.refreshIntervalValue)}stopRefreshing(){this.refreshTimer&&clearInterval(this.refreshTimer)}loadScripts(){this.element.querySelectorAll("script").forEach((e=>{const t=document.createElement("script");t.innerHTML=e.innerHTML,document.head.appendChild(t).parentNode.removeChild(t)}))}}o.values={url:String,lazyLoading:Boolean,lazyLoadingThreshold:Number,lazyLoadingRootMargin:{type:String,default:"0px"},refreshInterval:Number,loadScripts:Boolean};export{o as default};

